#
# weechat -- plugins.conf
#
# WARNING: It is NOT recommended to edit this file by hand,
# especially if WeeChat is running.
#
# Use /set or similar command to change settings in WeeChat.
#
# For more info, see: https://weechat.org/doc/quickstart
#

[var]
fifo.fifo = "on"
lua.check_license = "off"
perl.beep.beep_command_dcc = "$bell"
perl.beep.beep_command_highlight = "$bell"
perl.beep.beep_command_pv = "$bell"
perl.beep.beep_command_timeout = "30000"
perl.beep.beep_dcc = "on"
perl.beep.beep_highlight = "on"
perl.beep.beep_highlight_blacklist = "off"
perl.beep.beep_highlight_whitelist = "off"
perl.beep.beep_pv = "on"
perl.beep.beep_pv_blacklist = "off"
perl.beep.beep_pv_whitelist = "off"
perl.beep.beep_trigger_highlight = ""
perl.beep.beep_trigger_pv = ""
perl.beep.bell_always = ""
perl.beep.blacklist_nicks = ""
perl.beep.whitelist_channels = ""
perl.beep.whitelist_nicks = ""
perl.buddylist.buddy.on.server = "on"
perl.buddylist.buddy.on.server.color = "lightgreen"
perl.buddylist.buddylist = "%h/buddylist.txt"
perl.buddylist.callback.timeout = "60"
perl.buddylist.check.buddies = "20"
perl.buddylist.color.away = "cyan"
perl.buddylist.color.default = "default"
perl.buddylist.color.number = "lightred"
perl.buddylist.color.offline = "blue"
perl.buddylist.color.online = "yellow"
perl.buddylist.color.server = "white"
perl.buddylist.color.server.offline = "hide"
perl.buddylist.display.original.nick = "off"
perl.buddylist.display.social.net = "on"
perl.buddylist.display.social.net.color = "yellow"
perl.buddylist.hide.bar = "on"
perl.buddylist.hide.buddy.if.offline = "off"
perl.buddylist.hide.server.if.buddies.offline = "off"
perl.buddylist.hide.servername.in.buddylist = "off"
perl.buddylist.show.query = "on"
perl.buddylist.sort = "default"
perl.buddylist.text.away = ""
perl.buddylist.text.color = "white"
perl.buddylist.text.offline = ""
perl.buddylist.text.online = ""
perl.buddylist.use.redirection = "on"
perl.check_license = "off"
perl.listsort.max_size = "100"
python.autojoin.autosave = "off"
python.check_license = "off"
python.clone_scanner.autofocus = "on"
python.clone_scanner.clone_onjoin_alert_key = "mask"
python.clone_scanner.clone_report_key = "mask"
python.clone_scanner.colors.clone_report.clone.match = "chat"
python.clone_scanner.colors.clone_report.clone.message = "chat"
python.clone_scanner.colors.clone_report.header.channel = "bold"
python.clone_scanner.colors.clone_report.header.message = "chat"
python.clone_scanner.colors.clone_report.header.number_of_hosts = "bold"
python.clone_scanner.colors.clone_report.subheader.host = "bold"
python.clone_scanner.colors.clone_report.subheader.message = "chat"
python.clone_scanner.colors.clone_report.subheader.number_of_clones = "bold"
python.clone_scanner.colors.join_messages.channel = "bold"
python.clone_scanner.colors.join_messages.identhost = "chat"
python.clone_scanner.colors.join_messages.message = "chat"
python.clone_scanner.colors.join_messages.nick = "bold"
python.clone_scanner.colors.mask.identhost = ""
python.clone_scanner.colors.mask.nick = "bold"
python.clone_scanner.colors.onjoin_alert.channel = "red"
python.clone_scanner.colors.onjoin_alert.matches = "bold red"
python.clone_scanner.colors.onjoin_alert.message = "red"
python.clone_scanner.colors.onjoin_alert.nick = "bold red"
python.clone_scanner.compare_idents = "off"
python.clone_scanner.display_join_messages = "off"
python.clone_scanner.display_onjoin_alert_clone_buffer = "on"
python.clone_scanner.display_onjoin_alert_current_buffer = "off"
python.clone_scanner.display_onjoin_alert_target_buffer = "on"
python.clone_scanner.display_scan_report_clone_buffer = "on"
python.clone_scanner.display_scan_report_current_buffer = "on"
python.clone_scanner.display_scan_report_target_buffer = "off"
python.clone_scanner.hooks.excluded_servers = "bitlbee,twitchtv"
python.clone_scanner.hooks.explicit_servers = "*"
python.clone_scanner.lag_warning = "on"
python.grep.clear_buffer = "off"
python.grep.default_tail_head = "10"
python.grep.go_to_buffer = "on"
python.grep.log_filter = ""
python.grep.max_lines = "4000"
python.grep.show_summary = "on"
python.grep.size_limit = "2048"
python.histman.buffer_close = "off"
python.histman.history_dir = "%h/history"
python.histman.min_length = "2"
python.histman.number = "0"
python.histman.pattern = "(.*password|.*nickserv|/quit)"
python.histman.rmodifier = "off"
python.histman.save = "all"
python.histman.save_global = "off"
python.histman.skip_double = "on"
python.lastfm.command = "/me is listening to %s"
python.lastfm.lastfm_username = "josefs0n"
python.listbuffer.autofocus = "on"
python.listbuffer.channel_min_width = "25"
python.listbuffer.modes_min_width = "8"
python.listbuffer.sort_inverted = "off"
python.listbuffer.sort_order = "users"
python.listbuffer.users_min_width = "8"
python.mnotify.email_from = "irc <irc@localhost>"
python.mnotify.email_to = ""
python.mnotify.sendmail = "msmtp"
python.mnotify.show_channel_topic = "on"
python.mnotify.show_dcc = "on"
python.mnotify.show_highlighted_message = "on"
python.mnotify.show_invite_message = "on"
python.mnotify.show_notice_message = "off"
python.mnotify.show_private_action_message = "on"
python.mnotify.show_private_message = "on"
python.mnotify.show_public_action_message = "off"
python.mnotify.show_public_message = "off"
python.mnotify.show_server = "on"
python.mnotify.show_upgrade_ended = "on"
python.mnotify.sticky = "off"
python.mnotify.sticky_away = "on"
python.notification_center.show_highlights = "on"
python.notification_center.show_message_text = "on"
python.notification_center.show_private_message = "on"
python.notification_center.sound = "off"
python.spell_correction.auto_pop_up_item = "off"
python.spell_correction.auto_replace = "on"
python.spell_correction.catch_input_completion = "on"
python.spell_correction.complete_near = "0"
python.spell_correction.eat_input_char = "on"
python.spell_correction.hide_single_dict = "on"
python.spell_correction.replace_mode = "off"
python.spell_correction.suggest_item = "${white}%S${default}"
python.vimode.no_warn = "off"
ruby.check_license = "off"
ruby.url_hinter.launcher = "open"
ruby.url_shorten.bitly_key = ""
ruby.url_shorten.bitly_login = ""
ruby.url_shorten.color = "red"
ruby.url_shorten.custom = "http://tinyurl.com/api-create.php?url=%s"
ruby.url_shorten.maxlen = "0"
ruby.url_shorten.shortener = ""
ruby.url_shorten.yourls_url = ""
tcl.check_license = "off"

[desc]
perl.beep.beep_command_dcc = "command for beep on dcc, special value "$bell" is allowed, as well as "$bell;command" (default: "$bell")"
perl.beep.beep_command_highlight = "command for beep on highlight, special value "$bell" is allowed, as well as "$bell;command" (default: "$bell")"
perl.beep.beep_command_pv = "command for beep on private message, special value "$bell" is allowed, as well as "$bell;command" (default: "$bell")"
perl.beep.beep_command_timeout = "timeout for command run (in milliseconds, 0 = never kill (not recommended)) (default: "30000")"
perl.beep.beep_dcc = "beep on dcc (default: "on")"
perl.beep.beep_highlight = "beep on highlight (default: "on")"
perl.beep.beep_highlight_blacklist = "turn blacklist for highlights on or off (default: "off")"
perl.beep.beep_highlight_whitelist = "turn whitelist for highlights on or off (default: "off")"
perl.beep.beep_pv = "beep on private message (default: "on")"
perl.beep.beep_pv_blacklist = "turn blacklist for private messages on or off (default: "off")"
perl.beep.beep_pv_whitelist = "turn whitelist for private messages on or off (default: "off")"
perl.beep.beep_trigger_highlight = "word that will trigger execution of beep_command_highlight (if empty, anything will trigger) (default: "")"
perl.beep.beep_trigger_pv = "word that will trigger execution of beep_command_pv (it empty, anything will trigger) (default: "")"
perl.beep.bell_always = "use $bell on private messages and/or highlights regardless of trigger and whitelist settings (example: "pv,highlight") (default: "")"
perl.beep.blacklist_nicks = "comma-separated list of "server.nick": if not empty, these nicks will not be able to trigger execution of commands. Cannot be used in conjuction with whitelist (example: "freenode.nick1,freenode.nick2") (default: "")"
perl.beep.whitelist_channels = "comma-separated list of "server.#channel": if not empty, only these channels will trigger execution of commands (example: "freenode.#weechat,freenode.#channel2") (default: "")"
perl.beep.whitelist_nicks = "comma-separated list of "server.nick": if not empty, only these nicks will trigger execution of commands (example: "freenode.nick1,freenode.nick2") (default: "")"
perl.buddylist.buddy.on.server = "show buddy who is connected to a server, but not visiting the same channel(s) (default: on)"
perl.buddylist.buddy.on.server.color = "color for online buddy but not visiting the same channel(s) (default: lightgreen)"
perl.buddylist.buddylist = "path/file-name to store your buddies. "%h" will be replaced by WeeChat home (by default: ~/.weechat)"
perl.buddylist.callback.timeout = "time in seconds to wait for answer from server. (default: 60)"
perl.buddylist.check.buddies = "time in seconds to send a /whois request to server. Be careful not to flood server (default: 20)"
perl.buddylist.color.away = "color for away buddies"
perl.buddylist.color.default = "fall back color. (default: standard weechat color)"
perl.buddylist.color.number = "color for channel number (default: lightred). If empty, channel list option is off"
perl.buddylist.color.offline = "color for offline buddies"
perl.buddylist.color.online = "color for online buddies"
perl.buddylist.color.server = "color for servername"
perl.buddylist.color.server.offline = "color for disconnected server (default: hide)"
perl.buddylist.display.original.nick = "display original nickname even if buddy changed his /nick (you have to add new nick to buddylist (default: off)"
perl.buddylist.display.social.net = "using bitlbee, buddies will be sorted in sublists with social-network name (eg. msn/jabber/facebook)(default: on)"
perl.buddylist.display.social.net.color = "color for social-network name (default: yellow)"
perl.buddylist.hide.bar = "hides buddylist bar when all servers with added buddies are offline (on = default, always = buddylist bar will be hidden (for example if you want to add item 'buddylist' to 'weechat.bar.status.items', off = buddylist bar will not be hidden))"
perl.buddylist.hide.buddy.if.offline = "hide buddy if offline (default: off)"
perl.buddylist.hide.server.if.buddies.offline = "hides server when all buddies are offline for this server (default: off)"
perl.buddylist.hide.servername.in.buddylist = "hide the servername in buddylist. If "on" only nicks will be displayed in buddylist (default: off)"
perl.buddylist.show.query = "displays a query buffer in front of the channel list"
perl.buddylist.sort = "sort method for buddylist (default = buddylist will be sort by nickname, status = buddylist will be sort by status (online, away, offline))"
perl.buddylist.text.away = "optional away text in buddylist (sort method has to be 'status')"
perl.buddylist.text.color = "color for optional online/away/offline-text in buddylist (default: white)"
perl.buddylist.text.offline = "optional offline text in buddylist (sort method has to be 'status')"
perl.buddylist.text.online = "optional online text in buddylist (sort method has to be 'status')"
perl.buddylist.use.redirection = "using redirection to get status of buddies (needs weechat >=0.3.4) (default: on)"
perl.listsort.max_size = "maximum size of /list output in kilobytes to be handled"
python.clone_scanner.autofocus = "Focus the clone_scanner buffer in the current window if it isn't already displayed by a window. (default: "on")"
python.clone_scanner.clone_onjoin_alert_key = "Which 'key' to display in the on-join alerts: 'mask' for full hostmasks, or 'nick' for nicks (default: "mask")"
python.clone_scanner.clone_report_key = "Which 'key' to display in the clone report: 'mask' for full hostmasks, or 'nick' for nicks (default: "mask")"
python.clone_scanner.colors.clone_report.clone.match = "The colour of the match details (masks or nicks) in the clone report. (default: "chat")"
python.clone_scanner.colors.clone_report.clone.message = "The colour of the clone hit in the clone report message. (default: "chat")"
python.clone_scanner.colors.clone_report.header.channel = "The colour of the channel name in the clone report header. (default: "bold")"
python.clone_scanner.colors.clone_report.header.message = "The colour of the clone report header. (default: "chat")"
python.clone_scanner.colors.clone_report.header.number_of_hosts = "The colour of the number of hosts in the clone report header. (default: "bold")"
python.clone_scanner.colors.clone_report.subheader.host = "The colour of the host in the clone report subheader. (default: "bold")"
python.clone_scanner.colors.clone_report.subheader.message = "The colour of the clone report subheader. (default: "chat")"
python.clone_scanner.colors.clone_report.subheader.number_of_clones = "The colour of the number of clones in the clone report subheader. (default: "bold")"
python.clone_scanner.colors.join_messages.channel = "The colour for the 'channel'-part of the join messages. (default: "bold")"
python.clone_scanner.colors.join_messages.identhost = "The colour for the 'ident@host'-part of the join messages. (default: "chat")"
python.clone_scanner.colors.join_messages.message = "The base colour for the join messages. (default: "chat")"
python.clone_scanner.colors.join_messages.nick = "The colour for the 'nick'-part of the join messages. Note: if you have colorize_nicks, this option might not always work as expected. (default: "bold")"
python.clone_scanner.colors.mask.identhost = "The formatting of the identhost in the match mask. (default: "")"
python.clone_scanner.colors.mask.nick = "The formatting of the nick in the match mask. (default: "bold")"
python.clone_scanner.colors.onjoin_alert.channel = "The on-join clone alert's channel colour. Formats are space separated. (default: "red")"
python.clone_scanner.colors.onjoin_alert.matches = "The on-join clone alert's matches (masks or nicks) colour. Formats are space separated. Note: if you have colorize_nicks, this option might not work as expected. (default: "bold red")"
python.clone_scanner.colors.onjoin_alert.message = "The on-join clone alert's message colour. Formats are space separated. (default: "red")"
python.clone_scanner.colors.onjoin_alert.nick = "The on-join clone alert's nick colour. Formats are space separated. Note: if you have colorize_nicks, this option might not work as expected. (default: "bold red")"
python.clone_scanner.compare_idents = "Match against ident@host.name instead of just the hostname. Useful if you don't want different people from bouncers marked as clones (default: "off")"
python.clone_scanner.display_join_messages = "Display all joins in the clone_scanner buffer (default: "off")"
python.clone_scanner.display_onjoin_alert_clone_buffer = "Display an on-join clone alert in the clone_scanner buffer (default: "on")"
python.clone_scanner.display_onjoin_alert_current_buffer = "Display an on-join clone alert in the current buffer (default: "off")"
python.clone_scanner.display_onjoin_alert_target_buffer = "Display an on-join clone alert in the buffer where the clone was detected (default: "on")"
python.clone_scanner.display_scan_report_clone_buffer = "Display manual scan reports in the clone buffer (default: "on")"
python.clone_scanner.display_scan_report_current_buffer = "Display manual scan reports in the current buffer (default: "on")"
python.clone_scanner.display_scan_report_target_buffer = "Display manual scan reports in the buffer of the scanned channel (default: "off")"
python.clone_scanner.hooks.excluded_servers = "Which servers should the hook *not* be valid for? There's no support for wildcards unfortunately. E.g.: 'bitlbee,twitchtv' to exclude servers named bitlbee and twitchtv (default). (default: "bitlbee,twitchtv")"
python.clone_scanner.hooks.explicit_servers = "Comma-separated, wildcard-supporting list of servers for which we should add hook to for monitoring clones. E.g. 'freenode,chat4all,esper*' or '*' (default) (default: "*")"
python.clone_scanner.lag_warning = "Show temporary warning upon script load regarding the inefficiency of the script. Set to "off" to disable. (default: "on")"
python.histman.buffer_close = "save command history, when buffer will be closed (default: off) (default: "off")"
python.histman.history_dir = "locale cache directory for history files ("%h" will be replaced by WeeChat home, "~/.weechat" by default) (default: "%h/history")"
python.histman.min_length = "minimum length of command/text (default: 2) (default: "2")"
python.histman.number = "number of history commands/text to save. A positive number will save from oldest to latest, a negative number will save from latest to oldest. 0 = save whole history (e.g. -10 will save the last 10 history entries (default: "0")"
python.histman.pattern = "a simple regex to ignore commands/text. Empty value disable pattern matching (default: "(.*password|.*nickserv|/quit)")"
python.histman.rmodifier = "use rmodifier options to ignore commands/text (default:off) (default: "off")"
python.histman.save = "define what should be save from history. Possible values are "command", "text", "all". This is a fallback option (see /help histman) (default: "all")"
python.histman.save_global = "save global history, possible values are "command", "text", "all" or "off"(default: off) (default: "off")"
python.histman.skip_double = "skip lines that already exists (case sensitive) (default: "on")"
python.listbuffer.autofocus = "Focus the listbuffer in the current window if it isn't already displayed by a window."
python.listbuffer.channel_min_width = "The minimum width used for the channel name in the channel list. If a channelname is shorter than this amount, the column will be padded with spaces."
python.listbuffer.modes_min_width = "The minimum width used for modes in the channel list. If a channel has less modes than this amount, the column will be padded with spaces."
python.listbuffer.sort_inverted = "Invert the sort order for the channel list."
python.listbuffer.sort_order = "Last used sort order for the channel list."
python.listbuffer.users_min_width = "The minimum width used for the usercount in the channel list. If the usercount has less digits than this amount, the column will be padded with spaces."
python.spell_correction.auto_pop_up_item = "automatic pop-up suggestion item on a misspelled word (default: "off")"
python.spell_correction.auto_replace = "replaces misspelled word with selected suggestion, automatically. If you use "off" you will have to bind command "/spell_correction replace" to a key (default: "on")"
python.spell_correction.catch_input_completion = "will catch the input_complete commands [TAB-key] (default: "on")"
python.spell_correction.complete_near = "show suggestions item only if you are n-chars near the misspelled word (0 = off). Using 'replace_mode' cursor has to be n-chars near misspelled word to cycle through suggestions. (default: "0")"
python.spell_correction.eat_input_char = "will eat the next char you type, after replacing a misspelled word (default: "on")"
python.spell_correction.hide_single_dict = "will hide dict in item if you have a single dict for buffer only (default: "on")"
python.spell_correction.replace_mode = "misspelled word will be replaced directly by suggestions. Use option 'complete_near' to specify range and item 'spell_suggest' to show possible suggestions. (default: "off")"
python.spell_correction.suggest_item = "item format (%S = suggestion, %D = dict). Colors are allowed with format "${color}". note: since WeeChat 0.4.2 content is evaluated, see /help eval. (default: "${white}%S${default}")"
python.vimode.no_warn = "don't warn about problematickeybindings and tmux/screen (default: "off")"
