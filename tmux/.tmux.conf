# SETTINGS - GENERAL{{{
    if-shell 'test "$(uname)" = "Darwin"' 'set-option -g default-shell /usr/local/bin/zsh'                      # default shell/name
    if-shell 'test "$(uname)" = "Darwin"' 'set-option -g default-command "reattach-to-user-namespace -l zsh"'   # lets vim access clipboard when inside tmux
    set -g prefix C-a                                        # set Ctrl-a as the default prefix key combination
    unbind C-b                                               # and unbind C-b to free it up
    bind C-a send-prefix                                     # use send-prefix to pass C-a through to application
    set -g mouse on                                          # allow mouse
    set -g default-terminal "tmux-256color"                  # make tmux display things in 256 colors
    set -g history-limit 10000                               # set scrollback history to 10000 (10k)
    set -sg escape-time 0                                    # shorten command delay
    set-window-option -g mode-keys vi                        # allow vi-mode
# set window and pane index to 1 (0 by default)
    set-option -g base-index 1
    setw -g pane-base-index 1
    set-window-option -g automatic-rename on    # auto window rename
# OSC52 copy/yank{{{
        set -g set-clipboard on                                  # set clipboard based on OSC52
        # corrects: tmux info | grep  Ms;
        # tmux must have Ms string in order to yank with OSC52
        # For old versions of tmux < 3.2
        # set -as terminal-overrides ',rxvt-unicode-256color:Ms=\E]52;%p1%s;%p2%s\007'
        set -as terminal-overrides '*88col*:colors=88,*256col*:colors=256,xterm*:XT:Ms=\E]52;%p1%s;%p2%s\007:Cc=\E]12;%p1%s\007:Cr=\E]12;black\007\E]112\007:Cs=\E[%p1%d q:Csr=\E[2 q,rxvt-uni*:XT:Ms=\E]52;%p1%s;%p2%s\007:Cc=\E]12;%p1%s\007:Cr=\E]12;black\007:Cs=\E]777;Cs;%p1%d\007'
        # From 3.2 and forward
        # set -as terminal-features ',rxvt-unicode-256color:clipboard'
# }}}
# }}}
# MAPPINGS {{{
    unbind %
    unbind '"'
    unbind -
    unbind .
    unbind r
    unbind l
    unbind L
    # Split Pane Keybindings
    bind-key '\' split-window -h          # split vertically
    bind-key '-' split-window -v          # split horizontally
    # Split Window Keybindings
    bind-key '_' split-window -fv
    bind-key '|' split-window -fh
    # -Z => keeps zoom if it was zoomed
    bind-key h select-pane -L -Z        # move cursor to left
    bind-key j select-pane -D -Z        # move cursor to below
    bind-key k select-pane -U -Z        # move cursor to above
    bind-key l select-pane -R -Z        # move cursor to right
    # bind H
    # bind J
    # bind K
    # bind L
    bind-key o resize-pane -Z           # just like vim :only window but toggle
    bind-key % command-prompt -I "#W" "rename-window '%%'"
    bind-key . command-prompt -I "#S" "rename-session -- '%%'"
    bind-key r source-file ~/.tmux.conf \; display "Reloaded!"      # reload ~/.tmux.conf using PREFIX r
    bind-key ! kill-session
    # Resize-Mode{{{
    bind-key > switch-client -T RESIZE
    bind-key < switch-client -T RESIZE

    bind-key -T RESIZE k resize-pane -U \; switch-client -T RESIZE
    bind-key -T RESIZE j resize-pane -D \; switch-client -T RESIZE
    bind-key -T RESIZE h resize-pane -L \; switch-client -T RESIZE
    bind-key -T RESIZE l resize-pane -R \; switch-client -T RESIZE

    bind-key -T RESIZE K resize-pane -U 5 \; switch-client -T RESIZE
    bind-key -T RESIZE J resize-pane -D 5 \; switch-client -T RESIZE
    bind-key -T RESIZE H resize-pane -L 5 \; switch-client -T RESIZE
    bind-key -T RESIZE L resize-pane -R 5 \; switch-client -T RESIZE
    # }}}
    # For fzf-tmux-script {{{
    set -s focus-events on
    if-shell '[ -f ~/.tmux/fzf-tmux-script/panes/fzf-panes.tmux ]' {
        set-hook -g pane-focus-in[10] \
        "run -b 'bash ~/.tmux/fzf-tmux-script/panes/fzf-panes.tmux update_mru_pane_ids'"
        bind w run -b 'bash ~/.tmux/fzf-tmux-script/panes/fzf-panes.tmux new_window'
    } {
        set-hook -ug pane-focus-in[10]
        bind w choose-tree -Z
    }
    # }}}
    # fzf
    bind-key c-p run "tmux split-window -l 12 'zsh -ci fz_pane'"
    bind-key c-s run "tmux split-window -l 12 'zsh -ci fz_session'"
    bind-key c-q run "tmux split-window -l 12 'zsh -ci fz_tmkill'"

    bind-key -Troot M-a switch-client -Tgo
    bind-key c-o switch-client -Tgo
    bind-key -T go a select-window -t 1
    bind-key -T go s select-window -t 2
    bind-key -T go d select-window -t 3
    bind-key -T go f select-window -t 4
    bind-key -T go g select-window -t 5
    bind-key -T go h select-window -t 6
    bind-key -T go j select-window -t 7
    bind-key -T go k select-window -t 8
    bind-key -T go l select-window -t 9
# Copy Paste
    set-window-option -g mode-keys vi
    unbind-key -T copy-mode-vi Space
    bind-key -T copy-mode-vi Space send-keys -X clear-selection
    bind-key -T copy-mode-vi v send-keys -X begin-selection
    bind-key -T copy-mode-vi V send-keys -X rectangle-toggle
# YANK/COPY DEPRECATED in favor of OSC52{{{
    # Clipboard mess --> Doesnt need it anymore in favor or OSC52
    # These need iterm2 [applications in terminal may access clipboard] option
    # if-shell 'test "$(uname)" = "Darwin"' 'bind-key -T copy-mode-vi y send-keys -X copy-selection'
    # if-shell 'test "$(uname)" = "Darwin"' 'bind-key -T copy-mode-vi Y send-keys -X copy-line'
    # if-shell 'test "$(uname)" = "Linux"' 'bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xsel -i -p && xsel -o -p | xsel -i -b"'
    # if-shell 'test "$(uname)" = "Linux"' 'bind-key ] run "xsel -o | tmux load-buffer - ; tmux paste-buffer"'
# }}}
    bind-key -T copy-mode-vi WheelUpPane send-keys -X halfpage-up
    bind-key -T copy-mode-vi WheelDownPane send-keys -X halfpage-down
    bind -T root WheelUpPane   if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
    bind -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; send-keys -M"
# Url grab
    bind-key u capture-pane \; save-buffer /tmp/tmux-buffer \; new-window -n "urlview" '$SHELL -c "urlview < /tmp/tmux-buffer"'
# }}}
# STATUSBAR {{{
    set -g status on
# Colors
    set -g status-fg colour9
    set -g status-bg colour16
#Tmuxlime vim plugin generated file
    source-file ~/.tmux-theme
    # source -file ~/dotfiles/tmux/.tmux-powerlinerc
# }}}
# PLUGINS {{{
# initializes TMUX plugin manager
run-shell $HOME/.tmux/tpm/tpm
run '$HOME/.tmux/tpm/tpm'
# prefix + I to install
# prefix + U update 
# prefix + meta u to uninstall

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
# prefix + Ctrl[f|u|d]  for searching [file|links|numbers] respectively
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-yank'
# # 'o- open when over file or link string when in copy mode'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-urlview'
set -g @plugin 'tmux-plugins/tmux-resurrect'
# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'

# Ressurect plugin
set -g @resurrect-capture-pane-contents 'on'
# set -g @resurrect-processes 'ssh weechat ipython tor pianobar polipo'
# set -g @resurrect-processes 'some_program "git log"' # Programs with Arguments
# set -g @resurrect-processes ':all:' # be careful
# set -g @resurrect-processes 'false'
# for vim and neovim
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-strategy-nvim 'session'
# }}}
# vim: fdm=marker nowrap
